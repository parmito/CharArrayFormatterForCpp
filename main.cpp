#include <iostream>
#include <string.h>
#include <fstream>
#include <stdlib.h>

using namespace std;

static int InsertSpacesWithBackslash(char *out,char *in)
{
    int inLen = strlen(in);

    out[0] = in[0];
    int j = 1;
    for (int i = 1; i < inLen; i++,j++)
    {
        if(i%2 == 0)
        {
            out[j] = 0x20;
            j++;
            if(i%60 == 0)
            {
                out[j] = 0x5C;
                j++;
                out[j] = 0x0D;
                j++;
                out[j] = 0x0A;
                j++;
            }
        }
        out[j] = in[i];
    }
    return j;
}


static int InsertSpacesNoBackslash(char *out,char *in)
{
    int inLen = strlen(in);

    out[0] = in[0];
    int j = 1;
    for (int i = 1; i < inLen; i++,j++)
    {
        if(i%2 == 0)
        {
            out[j] = 0x20;
            j++;
/*            if(i%60 == 0)
            {
                out[j] = 0x5C;
                j++;
                out[j] = 0x0D;
                j++;
                out[j] = 0x0A;
                j++;
            }*/
        }
        out[j] = in[i];
    }
    return j;
}

char intToAscii(int number)
{
   return '0' + number;
}

int main()
{
    char* hexArray[]=
    {

    "2E7201523030323241524DA80200007F04000040000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000007F1200000400000000000000FF120000020000000000FF13000070000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000007F2200000400000000000000FF220000020000000000FF23000070000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000007F3200000400000000000000FF320000020000000000FF33000070000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000007F4200000400000000000000FF420000020000000000FF43000070000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000000040000000000000000000000000007F75000006000000000000000000FF750000020000000000000F000004000000D7C8DBF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037E1EDEA",
    };
   int hexArrayLen;

   std::string FileName;
   /*char* FileName[] =
   {    "Dataset1.txt",
        "Dataset2.txt",
        "Dataset3.txt",
        "Dataset4.txt",
    };*/
    int num_of_elements = sizeof(hexArray) / sizeof(hexArray[0]);
    for(int i = 0; i < num_of_elements ; i++)
    {
        hexArrayLen = strlen(hexArray[i]); /* Subtract 1 to exclude the null terminator*/
        char *hexArraySpace = (char*)(malloc(4*hexArrayLen));/* Allocate memory for binary array*/
        memset(hexArraySpace,0x00,4*hexArrayLen);
        (void)InsertSpacesWithBackslash(hexArraySpace,hexArray[i]);
        cout << hexArraySpace << endl;
        FileName.clear();
        FileName.append("Dataset_ToBeUsedWithCppArray_");
        char cmd[32];
        memset(cmd,0,sizeof(cmd));
        sprintf(cmd,"%02d",i);
        FileName += cmd;
        FileName += ".txt";
        ofstream DatasetFile(FileName);

        /* Write to the file*/
        /*DatasetFile << hexArraySpace << endl;*/
        DatasetFile << "echo " << hexArraySpace << " | isotpsend -s 773 -d 7dd -p55 can0" << endl;

        /* Close the file*/
        DatasetFile.close();

        free(hexArraySpace);
    }


    for(int i = 0; i < num_of_elements ; i++)
    {
        hexArrayLen = strlen(hexArray[i]); /* Subtract 1 to exclude the null terminator*/
        char *hexArraySpace = (char*)(malloc(4*hexArrayLen));/* Allocate memory for binary array*/
        memset(hexArraySpace,0x00,4*hexArrayLen);
        (void)InsertSpacesNoBackslash(hexArraySpace,hexArray[i]);
        cout << hexArraySpace << endl;
        FileName.clear();
        FileName.append("Dataset_ToBeUsedWithZUODIS_");
        char cmd[32];
        memset(cmd,0,sizeof(cmd));
        sprintf(cmd,"%02d",i);
        FileName += cmd;
        FileName += ".txt";
        ofstream DatasetFile(FileName);

        /* Write to the file*/
        DatasetFile << "echo " << hexArraySpace << " | isotpsend -s 773 -d 7dd -p55 can0" << endl;

        /* Close the file*/
        DatasetFile.close();

        free(hexArraySpace);
    }

    return 0;
}
